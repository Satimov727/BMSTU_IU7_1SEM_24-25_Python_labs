# Лимарев Степан ИУ7-11Б. Программа предназначена для вычисления длин сторон треугольника по введённым координатам, а также для вычисления его высоты, проведённой из наибольшего угла.
# Необходимо определить, является ли треугольник равнобедренным. Далее ввести координаты точки и определить, находится ли она внутри треугольника. Если да, то найти расстояние от точки до ближайшей стороны треугольника.


# Импортирование математичсеких функций.
from math import sqrt, exp


# Ввод исходных данных.
ax = float(input("Введите координату x точки a треугольника: "))  # Координата x точки a треугольника.
ay = float(input("Введите координату y точки a треугольника: "))  # Координата y точки a треугольника.
bx = float(input("Введите координату x точки b треугольника: "))  # Координата x точки b треугольника.
by = float(input("Введите координату y точки b треугольника: "))  # Координата y точки b треугольника.
cx = float(input("Введите координату x точки c треугольника: "))  # Координата x точки c треугольника.
cy = float(input("Введите координату y точки c треугольника: "))  # Координата y точки c треугольника.
dot_x = float(input("Введите координату x произвольной точки: "))  # Координата x произвольной точки.
dot_y = float(input("Введите координату y произвольной точки: "))  # Координата y произвольной точки.

# Вычисления.
AB = sqrt((bx - ax) ** 2 + (by - ay) ** 2)  # Формула для вычисления длины стороны AB треугольника.
BC = sqrt((cx - bx) ** 2 + (cy - by) ** 2)  # Формула для вычисления длины стороны BC треугольника.
AC = sqrt((cx - ax) ** 2 + (cy - ay) ** 2)  # Формула для вычисления длины стороны AC треугольника.


# Проверка существования треугольника.
if AB + BC > AC and AB + AC > BC and BC + AC > AB:

    print(f"Сторона AB заданного треугольника: {AB:.7g}")
    print(f"Сторона BC заданного треугольника: {BC:.7g}")
    print(f"Сторона AC заданного треугольника: {AC:.7g}")
    P = AB + BC + AC  # Формула для вычисления периметра треугольника.
    p = P / 2  # Формула для вычисления полупериметра треугольника.
    S = sqrt(p * (p - AB) * (p - BC) * (p - AC))  # Формула для вычисления площади треугольника.
    eps = exp(-8)  # Переменная для учёта погрешности в вычислениях.


    # Формулы для вычисления длины высоты треугольника, проведённой из наибольшего угла.
    if AB > BC and AB > AC:
        h = 2 * S / AB 

    if BC > AB and BC > AC:
        h = 2 * S / BC

    if AC > AB and AC > BC:
        h = 2 * S / AC

    print(f"Высота заданного треугольника {h:.7g}")


    # Определение равнобедренности треугольника.
    if abs(AB - BC) < eps  or abs(AB - AC) < eps or abs(BC - AC) < eps:

        print("Заданный треугольник является равнобедренным")

    else:

        print("Заданный треугольник не является равнобедренным")
        

    # Проверка принадлежности произвольной точки к треугольнику.
    AO = sqrt(abs(ax - dot_x) ** 2 + abs(ay - dot_y) ** 2)  # Расстояние от точки O до вершины A.
    BO = sqrt(abs(bx - dot_x) ** 2 + abs(by - dot_y) ** 2)  # Расстояние от точки O до вершины B.
    CO = sqrt(abs(cx - dot_x) ** 2 + abs(cy - dot_y) ** 2)  # Расстояние от точки O до вершины C.

    P_OAB = (AB + AO + BO) / 2  # Полупериметр треугольника OAB.
    S_OAB = sqrt(P_OAB * (P_OAB - AB) * (P_OAB - AO) * (P_OAB - BO))  # Площадь треугольника OAB.

    P_OBC = (BC + BO + CO) / 2  # Полупериметр треугольника OBC.
    S_OBC = sqrt(P_OBC * (P_OBC - BC) * (P_OBC - BO) * (P_OBC - CO))  # Площадь треугольника OBC.

    P_OAC = (AC + AO + CO) / 2  # Полупериметр треугольника OAC.
    S_OAC = sqrt(P_OAC * (P_OAC - AC) * (P_OAC - AO) * (P_OAC - CO))  # Площадь треугольника OAC.
    
    if abs(S - (S_OAB + S_OBC + S_OAC)) < eps:

        print("Точка находится внутри заданного треугольника")


        # Вычисление ближайшего расстояния от точки до треугольника.
        h_ab = S_OAB * 2 / AB  # Высота треугольника OAB.
        h_bc = S_OBC * 2 / BC  # Высота треугольника OBC.
        h_ac = S_OAC * 2 / AC  # Высота треугольника OAC.

        if h_ab <= h_bc and h_ab <= h_ac:

            point_h = h_ab
        
        if h_bc <= h_ab and h_bc <= h_ac:

            point_h = h_bc
        
        if h_ac <= h_ab and h_ac <= h_bc:

            point_h = h_ac

        print(f"Ближайшее расстояние от точки до треугольника: {point_h:.7g}")

    else:

         print("Точка находится за пределами заданного треугольника")

else:
    print("Заданного треугольника не существует")

